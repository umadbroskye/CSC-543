#include <iostream>
#include <limits.h>
#include <vector>

#define vertices 50

int findMinDist(int* dist, bool* visits) {
    int min = INT_MAX;
    int mindex = 0;

    for(int i = 0; i < vertices; i++) {
        if(!visits[i] && dist[i] <= min){
            min = dist[i];
            mindex = i;
        }
    }
    return mindex;
}

void printPath(std::vector<int>& path) {
    for (size_t i = 0; i < path.size(); i++) {
        std::cout << path[i];
        if (i < path.size() - 1)
            std::cout << " -> ";
    }
    std::cout << std::endl;
}

void printSolution(int* dist, int* predecessors, int start, int end) {
    std::vector<int> path;
    int crawl = end;
    path.push_back(crawl);
    while (predecessors[crawl] != -1) {
        path.insert(path.begin(), predecessors[crawl]);
        crawl = predecessors[crawl];
    }
    
    std::cout << "Shortest path from " << start << " to " << end << ": ";
    printPath(path);
    std::cout << "Cost of the shortest path: " << dist[end] << std::endl;
}

void dijkstra(int graph[50][50], int start, int end) {
    int dist[vertices];
    bool visits[vertices];
    int predecessors[vertices];

    for (int i = 0; i < vertices; i++) {
        dist[i] = INT_MAX, visits[i] = false, predecessors[i] = -1;
    }
    dist[start] = 0;

    for(int i = 0; i < vertices - 1; i++) {
        int u = findMinDist(dist, visits);
        visits[u] = true;

        for(int v = 0; v < vertices; v++){
            if(!visits[v] && graph[u][v] && dist[u] != INT_MAX && graph[u][v] + dist[u] < dist[v]) {
                dist[v] = graph[u][v] + dist[u];
                predecessors[v] = u;
            }
        }
    }
    printSolution(dist, predecessors, start, end);
}

int main() {
    int graph[50][50] = {
        {0, 0, 3, 0, 0, 0, 0, 0, 10, 0, 0, 0, 6, 9, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 10, 0, 10, 0, 4, 7, 0, 0, 2, 1, 7, 0, 1, 4, 6, 0, 0, 0, 7, 0, 7, 0, 0 },
        {0, 0, 1, 8, 9, 7, 8, 5, 0, 1, 9, 0, 10, 0, 4, 3, 4, 0, 1, 1, 5, 0, 0, 1, 0, 0, 6, 0, 0, 0, 0, 10, 8, 6, 0, 0, 0, 0, 7, 2, 4, 1, 0, 8, 0, 0, 0, 7, 0, 7 },
        {3, 1, 0, 0, 0, 0, 0, 10, 1, 2, 0, 0, 8, 0, 0, 3, 0, 1, 10, 7, 3, 0, 0, 9, 0, 0, 0, 10, 5, 0, 5, 1, 4, 0, 0, 10, 0, 7, 2, 2, 0, 10, 0, 0, 2, 0, 0, 0, 0, 1 },
        {0, 8, 0, 0, 0, 8, 0, 1, 1, 0, 7, 0, 0, 9, 1, 0, 0, 8, 1, 0, 6, 9, 0, 0, 5, 0, 0, 0, 0, 0, 7, 9, 4, 10, 0, 0, 5, 0, 0, 3, 1, 0, 0, 0, 0, 8, 3, 1, 0, 2 },
        {0, 9, 0, 0, 0, 0, 9, 5, 0, 0, 3, 10, 0, 0, 1, 1, 6, 0, 0, 9, 3, 8, 0, 4, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 1, 0, 5, 6, 0, 0, 3, 0, 5, 4, 6, 0 },
        {0, 7, 0, 8, 0, 0, 7, 0, 0, 7, 6, 0, 9, 10, 1, 2, 2, 0, 0, 0, 0, 5, 0, 8, 2, 0, 0, 0, 2, 7, 10, 0, 0, 0, 4, 0, 0, 10, 8, 0, 0, 0, 0, 3, 1, 0, 10, 0, 0, 0 },
        {0, 8, 0, 0, 9, 7, 0, 0, 10, 7, 6, 8, 0, 0, 9, 0, 7, 0, 0, 4, 0, 2, 0, 0, 5, 5, 10, 0, 0, 2, 7, 6, 0, 6, 0, 1, 2, 4, 0, 4, 4, 0, 2, 5, 3, 0, 3, 8, 5, 0 },
        {0, 5, 10, 1, 5, 0, 0, 0, 1, 0, 1, 0, 10, 6, 6, 10, 4, 8, 0, 0, 0, 6, 6, 1, 0, 8, 3, 0, 0, 0, 8, 0, 0, 1, 10, 0, 0, 0, 0, 7, 0, 0, 0, 0, 4, 5, 0, 0, 2, 0 },
        {10, 0, 1, 1, 0, 0, 10, 1, 0, 0, 0, 6, 0, 0, 3, 0, 0, 5, 8, 1, 0, 9, 8, 0, 0, 0, 6, 0, 9, 0, 8, 0, 0, 0, 7, 3, 0, 0, 0, 0, 0, 0, 0, 1, 5, 0, 1, 1, 0, 1 },
        {0, 1, 2, 0, 0, 7, 7, 0, 0, 0, 0, 4, 0, 8, 0, 4, 8, 0, 8, 0, 0, 9, 7, 0, 0, 9, 8, 0, 0, 1, 0, 0, 10, 0, 3, 4, 7, 0, 0, 7, 0, 0, 4, 1, 4, 0, 0, 10, 0, 8 },
        {0, 9, 0, 7, 3, 6, 6, 1, 0, 0, 0, 9, 1, 5, 1, 8, 0, 9, 8, 0, 1, 4, 0, 1, 0, 0, 2, 0, 4, 4, 0, 2, 10, 0, 9, 7, 10, 0, 0, 8, 0, 0, 0, 0, 10, 2, 8, 5, 3, 0 },
        {0, 0, 0, 0, 10, 0, 8, 0, 6, 4, 9, 0, 0, 0, 3, 1, 0, 10, 5, 3, 3, 4, 7, 0, 8, 0, 8, 0, 7, 1, 1, 9, 5, 3, 6, 0, 5, 0, 8, 4, 0, 4, 8, 2, 0, 0, 3, 4, 0, 6 },
        {6, 10, 8, 0, 0, 9, 0, 10, 0, 0, 1, 0, 0, 0, 2, 0, 8, 0, 3, 0, 8, 0, 1, 4, 2, 0, 0, 6, 9, 0, 0, 4, 0, 9, 8, 0, 0, 1, 0, 5, 5, 0, 3, 0, 10, 3, 1, 4, 0, 0 },
        {9, 0, 0, 9, 0, 10, 0, 6, 0, 8, 5, 0, 0, 0, 0, 0, 0, 5, 2, 6, 8, 8, 0, 0, 0, 10, 0, 0, 0, 3, 0, 6, 0, 0, 1, 0, 0, 9, 0, 10, 8, 7, 5, 0, 0, 3, 6, 3, 0, 0 },
        {9, 4, 0, 1, 1, 1, 9, 6, 3, 0, 1, 3, 2, 0, 0, 6, 5, 6, 0, 5, 0, 2, 4, 2, 8, 0, 0, 0, 0, 0, 9, 0, 0, 10, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 1, 0 },
        {0, 3, 3, 0, 1, 2, 0, 10, 0, 4, 8, 1, 0, 0, 6, 0, 0, 0, 1, 9, 7, 0, 0, 6, 0, 8, 0, 3, 2, 8, 0, 0, 10, 5, 10, 0, 8, 4, 0, 2, 3, 2, 0, 3, 7, 0, 0, 0, 10, 0 },
        {0, 4, 0, 0, 6, 2, 7, 4, 0, 8, 0, 0, 8, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 5, 0, 3, 0, 8, 6, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 4, 0, 0 },
        {0, 0, 1, 8, 0, 0, 0, 8, 5, 0, 9, 10, 0, 5, 6, 0, 0, 0, 5, 8, 9, 10, 0, 3, 0, 0, 4, 0, 3, 0, 0, 1, 5, 0, 6, 3, 0, 9, 2, 9, 0, 0, 6, 5, 10, 0, 4, 0, 9, 0 },
        {0, 1, 10, 1, 0, 0, 0, 0, 8, 8, 8, 5, 3, 2, 0, 1, 0, 5, 0, 0, 3, 0, 4, 0, 1, 10, 0, 0, 5, 10, 1, 8, 3, 9, 5, 0, 0, 0, 5, 9, 9, 0, 8, 0, 1, 0, 8, 0, 0, 0 },
        {0, 1, 7, 0, 9, 0, 4, 0, 1, 0, 0, 3, 0, 6, 5, 9, 0, 8, 0, 0, 0, 3, 9, 9, 2, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 9, 0, 8, 4, 9, 7, 0, 6, 7, 9, 0, 0, 5, 0 },
        {0, 5, 3, 6, 3, 0, 0, 0, 0, 0, 1, 3, 8, 8, 0, 7, 0, 9, 3, 0, 0, 8, 0, 9, 2, 0, 4, 0, 0, 9, 0, 7, 1, 8, 1, 5, 2, 4, 0, 1, 0, 0, 1, 10, 8, 0, 10, 4, 5, 0 },
        {0, 0, 0, 9, 8, 5, 2, 6, 9, 9, 4, 4, 0, 8, 2, 0, 0, 10, 0, 3, 8, 0, 0, 0, 0, 5, 7, 0, 0, 9, 8, 0, 0, 0, 0, 7, 7, 10, 0, 0, 10, 4, 1, 0, 8, 0, 4, 0, 1, 0 },
        {2, 0, 0, 0, 0, 0, 0, 6, 8, 7, 0, 7, 1, 0, 4, 0, 0, 0, 4, 9, 0, 0, 0, 8, 0, 0, 5, 5, 0, 10, 10, 0, 0, 2, 0, 5, 1, 0, 2, 0, 0, 4, 8, 0, 6, 1, 0, 10, 0, 0 },
        {0, 1, 9, 0, 4, 8, 0, 1, 0, 0, 1, 0, 4, 0, 2, 6, 3, 3, 0, 9, 9, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 8, 0, 1, 2, 9, 4, 0, 6, 2, 10, 8, 0, 9, 2, 0 },
        {0, 0, 0, 5, 0, 2, 5, 0, 0, 0, 0, 8, 2, 0, 8, 0, 0, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 6, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 7, 5, 0, 1, 9, 8, 6, 10, 2, 9, 3 },
        {3, 0, 0, 0, 3, 0, 5, 8, 0, 9, 0, 0, 0, 10, 0, 8, 0, 0, 10, 1, 0, 5, 0, 0, 0, 0, 5, 0, 0, 4, 7, 7, 6, 0, 0, 3, 0, 7, 0, 4, 0, 2, 6, 0, 0, 2, 0, 4, 0, 6 },
        {0, 6, 0, 0, 0, 0, 10, 3, 6, 8, 2, 8, 0, 0, 0, 0, 0, 4, 0, 0, 4, 7, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 0, 2, 0, 3, 0, 0, 7, 1, 0, 0, 0, 9, 8, 0 },
        {10, 0, 10, 0, 6, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 3, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 1, 0, 0, 9, 0, 0, 8, 5, 5, 0, 0, 9, 0, 7, 0, 0, 0, 0, 0, 0, 0 },
        {0, 0, 5, 0, 0, 2, 0, 0, 9, 0, 4, 7, 9, 0, 0, 2, 3, 3, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 8, 0, 0, 5, 1, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 3, 10 },
        {10, 0, 0, 0, 0, 7, 2, 0, 0, 1, 4, 1, 0, 3, 0, 8, 5, 0, 10, 0, 9, 9, 10, 0, 4, 4, 0, 1, 7, 0, 0, 7, 5, 0, 5, 0, 2, 0, 2, 3, 10, 0, 0, 8, 0, 3, 0, 9, 0, 8 },
        {0, 0, 5, 7, 0, 10, 7, 8, 8, 0, 0, 1, 0, 0, 9, 0, 0, 0, 1, 0, 0, 8, 10, 0, 0, 7, 0, 0, 0, 0, 0, 9, 0, 8, 0, 0, 2, 0, 8, 0, 5, 4, 0, 0, 6, 9, 0, 0, 0, 1 },
        {4, 10, 1, 9, 0, 0, 6, 0, 0, 0, 2, 9, 4, 6, 0, 0, 3, 1, 8, 0, 7, 0, 0, 5, 0, 7, 0, 0, 0, 7, 9, 0, 8, 10, 0, 0, 4, 0, 1, 6, 0, 0, 0, 0, 8, 5, 0, 0, 10, 4 },
        {7, 8, 4, 4, 0, 0, 0, 0, 0, 10, 10, 5, 0, 0, 0, 10, 0, 5, 3, 0, 1, 0, 0, 0, 3, 6, 10, 9, 8, 5, 0, 8, 0, 8, 3, 9, 6, 0, 5, 3, 0, 0, 6, 0, 0, 9, 6, 3, 0, 2 },
        {0, 6, 0, 10, 0, 0, 6, 1, 0, 0, 0, 3, 9, 0, 10, 5, 8, 0, 9, 1, 8, 0, 2, 5, 0, 0, 0, 0, 0, 0, 8, 10, 8, 0, 0, 0, 7, 10, 2, 10, 4, 9, 3, 10, 8, 0, 10, 1, 10, 7 },
        {0, 0, 0, 0, 3, 4, 0, 10, 7, 3, 9, 6, 8, 1, 0, 10, 6, 6, 5, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 8, 0, 5, 10, 3, 0 },
        {2, 0, 10, 0, 3, 0, 1, 0, 3, 4, 7, 0, 0, 0, 0, 0, 0, 3, 0, 0, 5, 7, 5, 8, 0, 3, 8, 8, 5, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 5, 2, 0, 0, 0, 0, 4, 5, 0, 0, 9 },
        {1, 0, 0, 5, 3, 0, 2, 0, 0, 7, 10, 5, 0, 0, 0, 8, 0, 0, 0, 9, 2, 7, 1, 0, 0, 0, 0, 5, 1, 2, 2, 4, 6, 7, 0, 0, 0, 2, 0, 0, 0, 0, 7, 4, 9, 5, 0, 0, 0, 3 },
        {7, 0, 7, 0, 0, 10, 4, 0, 0, 0, 0, 0, 1, 9, 4, 4, 0, 9, 0, 0, 4, 10, 0, 1, 0, 7, 2, 5, 0, 0, 0, 0, 0, 10, 0, 0, 2, 0, 0, 10, 8, 1, 6, 2, 7, 0, 9, 2, 0, 0 },
        {0, 7, 2, 0, 1, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 2, 5, 8, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 8, 1, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 0, 2, 10, 0, 0, 2 },
        {1, 2, 2, 3, 0, 0, 4, 7, 0, 7, 8, 4, 5, 10, 0, 2, 0, 9, 9, 4, 1, 0, 0, 9, 7, 4, 3, 0, 10, 3, 0, 6, 3, 10, 3, 5, 0, 10, 0, 0, 3, 3, 10, 10, 0, 6, 0, 0, 0, 0 },
        {4, 4, 0, 1, 5, 0, 4, 0, 0, 0, 0, 0, 5, 8, 0, 3, 0, 0, 9, 9, 0, 10, 0, 4, 5, 0, 0, 9, 0, 10, 5, 0, 0, 4, 0, 2, 0, 8, 0, 3, 0, 0, 3, 7, 0, 0, 4, 6, 8, 8 },
        {6, 1, 10, 0, 6, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 2, 0, 0, 0, 7, 0, 4, 4, 0, 0, 2, 0, 0, 0, 0, 4, 0, 0, 9, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 4, 7, 8, 6 },
        {0, 0, 0, 0, 0, 0, 2, 0, 0, 4, 0, 8, 3, 5, 0, 0, 4, 6, 8, 0, 1, 1, 8, 6, 1, 6, 7, 7, 0, 0, 0, 0, 6, 3, 0, 0, 7, 6, 6, 10, 3, 0, 0, 5, 7, 0, 0, 2, 0, 0 },
        {0, 8, 0, 0, 0, 3, 5, 0, 1, 1, 0, 2, 0, 0, 0, 3, 0, 5, 0, 6, 10, 0, 0, 2, 9, 0, 1, 0, 0, 8, 0, 0, 0, 10, 0, 0, 4, 2, 1, 10, 7, 0, 5, 0, 10, 9, 0, 0, 0, 0 },
        {0, 0, 2, 0, 3, 1, 3, 4, 5, 4, 10, 0, 10, 0, 0, 7, 0, 10, 1, 7, 8, 8, 6, 10, 8, 0, 0, 0, 0, 0, 6, 8, 0, 8, 8, 0, 9, 7, 0, 0, 0, 0, 7, 10, 0, 7, 0, 0, 8, 0 },
        {7, 0, 0, 8, 0, 0, 0, 5, 0, 0, 2, 0, 3, 3, 2, 0, 0, 0, 0, 9, 0, 0, 1, 8, 6, 2, 0, 0, 0, 3, 9, 5, 9, 0, 0, 4, 5, 0, 2, 6, 0, 0, 0, 9, 7, 0, 9, 6, 0, 0 },
        {0, 0, 0, 3, 5, 10, 3, 0, 1, 0, 8, 3, 1, 6, 3, 0, 6, 4, 8, 0, 10, 4, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 6, 10, 5, 5, 0, 9, 10, 0, 4, 4, 0, 0, 0, 9, 0, 0, 6, 10 },
        {7, 7, 0, 1, 4, 0, 8, 0, 1, 10, 5, 4, 4, 3, 0, 0, 4, 0, 0, 0, 4, 0, 10, 9, 2, 4, 9, 0, 0, 9, 0, 0, 3, 1, 10, 0, 0, 2, 0, 0, 6, 7, 2, 0, 0, 6, 0, 0, 4, 0 },
        {0, 0, 0, 0, 6, 0, 5, 2, 0, 0, 3, 0, 0, 0, 1, 10, 0, 9, 0, 5, 5, 1, 0, 2, 9, 0, 8, 0, 3, 0, 0, 10, 0, 10, 3, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8, 0, 6, 4, 0, 0 },
        {0, 7, 1, 2, 0, 0, 0, 0, 1, 8, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 0, 0, 10, 8, 1, 4, 2, 7, 0, 9, 3, 0, 2, 0, 8, 6, 0, 0, 0, 0, 10, 0, 0, 0 }
    };
    int start, end;
    std::cout << "Enter the starting node (0-49): ";
    std::cin >> start;
    std::cout << "Enter the ending node (0-49): ";
    std::cin >> end;

        dijkstra(graph, start, end);

    return 0;
}