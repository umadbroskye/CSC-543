import networkx as nx
import matplotlib.pyplot as plt
import numpy as np

adjacency_matrix = np.array([
    [0, 0, 3, 0, 0, 0, 0, 0, 10, 0, 0, 0, 6, 9, 9, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 0, 10, 0, 10, 0, 4, 7, 0, 0, 2, 1, 7, 0, 1, 4, 6, 0, 0, 0, 7, 0, 7, 0, 0],
    [0, 0, 1, 8, 9, 7, 8, 5, 0, 1, 9, 0, 10, 0, 4, 3, 4, 0, 1, 1, 5, 0, 0, 1, 0, 0, 6, 0, 0, 0, 0, 10, 8, 6, 0, 0, 0, 0, 7, 2, 4, 1, 0, 8, 0, 0, 0, 7, 0, 7],
    [3, 1, 0, 0, 0, 0, 0, 10, 1, 2, 0, 0, 8, 0, 0, 3, 0, 1, 10, 7, 3, 0, 0, 9, 0, 0, 0, 10, 5, 0, 5, 1, 4, 0, 0, 10, 0, 7, 2, 2, 0, 10, 0, 0, 2, 0, 0, 0, 0, 1],
    [0, 8, 0, 0, 0, 8, 0, 1, 1, 0, 7, 0, 0, 9, 1, 0, 0, 8, 1, 0, 6, 9, 0, 0, 5, 0, 0, 0, 0, 0, 7, 9, 4, 10, 0, 0, 5, 0, 0, 3, 1, 0, 0, 0, 0, 8, 3, 1, 0, 2],
    [0, 9, 0, 0, 0, 0, 9, 5, 0, 0, 3, 10, 0, 0, 1, 1, 6, 0, 0, 9, 3, 8, 0, 4, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 1, 0, 5, 6, 0, 0, 3, 0, 5, 4, 6, 0],
    [0, 7, 0, 8, 0, 0, 7, 0, 0, 7, 6, 0, 9, 10, 1, 2, 2, 0, 0, 0, 0, 5, 0, 8, 2, 0, 0, 0, 2, 7, 10, 0, 0, 0, 4, 0, 0, 10, 8, 0, 0, 0, 0, 3, 1, 0, 10, 0, 0, 0],
    [0, 8, 0, 0, 9, 7, 0, 0, 10, 7, 6, 8, 0, 0, 9, 0, 7, 0, 0, 4, 0, 2, 0, 0, 5, 5, 10, 0, 0, 2, 7, 6, 0, 6, 0, 1, 2, 4, 0, 4, 4, 0, 2, 5, 3, 0, 3, 8, 5, 0],
    [0, 5, 10, 1, 5, 0, 0, 0, 1, 0, 1, 0, 10, 6, 6, 10, 4, 8, 0, 0, 0, 6, 6, 1, 0, 8, 3, 0, 0, 0, 8, 0, 0, 1, 10, 0, 0, 0, 0, 7, 0, 0, 0, 0, 4, 5, 0, 0, 2, 0],
    [10, 0, 1, 1, 0, 0, 10, 1, 0, 0, 0, 6, 0, 0, 3, 0, 0, 5, 8, 1, 0, 9, 8, 0, 0, 0, 6, 0, 9, 0, 8, 0, 0, 0, 7, 3, 0, 0, 0, 0, 0, 0, 0, 1, 5, 0, 1, 1, 0, 1],
    [0, 1, 2, 0, 0, 7, 7, 0, 0, 0, 0, 4, 0, 8, 0, 4, 8, 0, 8, 0, 0, 9, 7, 0, 0, 9, 8, 0, 0, 1, 0, 0, 10, 0, 3, 4, 7, 0, 0, 7, 0, 0, 4, 1, 4, 0, 0, 10, 0, 8],
    [0, 9, 0, 7, 3, 6, 6, 1, 0, 0, 0, 9, 1, 5, 1, 8, 0, 9, 8, 0, 1, 4, 0, 1, 0, 0, 2, 0, 4, 4, 0, 2, 10, 0, 9, 7, 10, 0, 0, 8, 0, 0, 0, 0, 10, 2, 8, 5, 3, 0],
    [0, 0, 0, 0, 10, 0, 8, 0, 6, 4, 9, 0, 0, 0, 3, 1, 0, 10, 5, 3, 3, 4, 7, 0, 8, 0, 8, 0, 7, 1, 1, 9, 5, 3, 6, 0, 5, 0, 8, 4, 0, 4, 8, 2, 0, 0, 3, 4, 0, 6],
    [6, 10, 8, 0, 0, 9, 0, 10, 0, 0, 1, 0, 0, 0, 2, 0, 8, 0, 3, 0, 8, 0, 1, 4, 2, 0, 0, 6, 9, 0, 0, 4, 0, 9, 8, 0, 0, 1, 0, 5, 5, 0, 3, 0, 10, 3, 1, 4, 0, 0],
    [9, 0, 0, 9, 0, 10, 0, 6, 0, 8, 5, 0, 0, 0, 0, 0, 0, 5, 2, 6, 8, 8, 0, 0, 0, 10, 0, 0, 0, 3, 0, 6, 0, 0, 1, 0, 0, 9, 0, 10, 8, 7, 5, 0, 0, 3, 6, 3, 0, 0],
    [9, 4, 0, 1, 1, 1, 9, 6, 3, 0, 1, 3, 2, 0, 0, 6, 5, 6, 0, 5, 0, 2, 4, 2, 8, 0, 0, 0, 0, 0, 9, 0, 0, 10, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 1, 0],
    [0, 3, 3, 0, 1, 2, 0, 10, 0, 4, 8, 1, 0, 0, 6, 0, 0, 0, 1, 9, 7, 0, 0, 6, 0, 8, 0, 3, 2, 8, 0, 0, 10, 5, 10, 0, 8, 4, 0, 2, 3, 2, 0, 3, 7, 0, 0, 0, 10, 0],
    [0, 4, 0, 0, 6, 2, 7, 4, 0, 8, 0, 0, 8, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3, 5, 0, 3, 0, 8, 6, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 6, 4, 0, 0],
    [0, 0, 1, 8, 0, 0, 0, 8, 5, 0, 9, 10, 0, 5, 6, 0, 0, 0, 5, 8, 9, 10, 0, 3, 0, 0, 4, 0, 3, 0, 0, 1, 5, 0, 6, 3, 0, 9, 2, 9, 0, 0, 6, 5, 10, 0, 4, 0, 9, 0],
    [0, 1, 10, 1, 0, 0, 0, 0, 8, 8, 8, 5, 3, 2, 0, 1, 0, 5, 0, 0, 3, 0, 4, 0, 1, 10, 0, 0, 5, 10, 1, 8, 3, 9, 5, 0, 0, 0, 5, 9, 9, 0, 8, 0, 1, 0, 8, 0, 0, 0],
    [0, 1, 7, 0, 9, 0, 4, 0, 1, 0, 0, 3, 0, 6, 5, 9, 0, 8, 0, 0, 0, 3, 9, 9, 2, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 9, 0, 8, 4, 9, 7, 0, 6, 7, 9, 0, 0, 5, 0],
    [0, 5, 3, 6, 3, 0, 0, 0, 0, 0, 1, 3, 8, 8, 0, 7, 0, 9, 3, 0, 0, 8, 0, 9, 2, 0, 4, 0, 0, 9, 0, 7, 1, 8, 1, 5, 2, 4, 0, 1, 0, 0, 1, 10, 8, 0, 10, 4, 5, 0],
    [0, 0, 0, 9, 8, 5, 2, 6, 9, 9, 4, 4, 0, 8, 2, 0, 0, 10, 0, 3, 8, 0, 0, 0, 0, 5, 7, 0, 0, 9, 8, 0, 0, 0, 0, 7, 7, 10, 0, 0, 10, 4, 1, 0, 8, 0, 4, 0, 1, 0],
    [2, 0, 0, 0, 0, 0, 0, 6, 8, 7, 0, 7, 1, 0, 4, 0, 0, 0, 4, 9, 0, 0, 0, 8, 0, 0, 5, 5, 0, 10, 10, 0, 0, 2, 0, 5, 1, 0, 2, 0, 0, 4, 8, 0, 6, 1, 0, 10, 0, 0],
    [0, 1, 9, 0, 4, 8, 0, 1, 0, 0, 1, 0, 4, 0, 2, 6, 3, 3, 0, 9, 9, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 5, 0, 8, 0, 1, 2, 9, 4, 0, 6, 2, 10, 8, 0, 9, 2, 0],
    [0, 0, 0, 5, 0, 2, 5, 0, 0, 0, 0, 8, 2, 0, 8, 0, 0, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 6, 0, 4, 0, 0, 3, 0, 0, 0, 0, 0, 0, 7, 5, 0, 1, 9, 8, 6, 10, 2, 9, 3],
    [3, 0, 0, 0, 3, 0, 5, 8, 0, 9, 0, 0, 0, 10, 0, 8, 0, 0, 10, 1, 0, 5, 0, 0, 0, 0, 5, 0, 0, 4, 7, 7, 6, 0, 0, 3, 0, 7, 0, 4, 0, 2, 6, 0, 0, 2, 0, 4, 0, 6],
    [0, 6, 0, 0, 0, 0, 10, 3, 6, 8, 2, 8, 0, 0, 0, 0, 0, 4, 0, 0, 4, 7, 5, 0, 0, 5, 0, 0, 0, 0, 0, 0, 10, 0, 0, 8, 0, 2, 0, 3, 0, 0, 7, 1, 0, 0, 0, 9, 8, 0],
    [10, 0, 10, 0, 6, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 3, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 1, 0, 0, 9, 0, 0, 8, 5, 5, 0, 0, 9, 0, 7, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 5, 0, 0, 2, 0, 0, 9, 0, 4, 7, 9, 0, 0, 2, 3, 3, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 8, 0, 0, 5, 1, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 3, 10],
    [10, 0, 0, 0, 0, 7, 2, 0, 0, 1, 4, 1, 0, 3, 0, 8, 5, 0, 10, 0, 9, 9, 10, 0, 4, 4, 0, 1, 7, 0, 0, 7, 5, 0, 5, 0, 2, 0, 2, 3, 10, 0, 0, 8, 0, 3, 0, 9, 0, 8],
    [0, 0, 5, 7, 0, 10, 7, 8, 8, 0, 0, 1, 0, 0, 9, 0, 0, 0, 1, 0, 0, 8, 10, 0, 0, 7, 0, 0, 0, 0, 0, 9, 0, 8, 0, 0, 2, 0, 8, 0, 5, 4, 0, 0, 6, 9, 0, 0, 0, 1],
    [4, 10, 1, 9, 0, 0, 6, 0, 0, 0, 2, 9, 4, 6, 0, 0, 3, 1, 8, 0, 7, 0, 0, 5, 0, 7, 0, 0, 0, 7, 9, 0, 8, 10, 0, 0, 4, 0, 1, 6, 0, 0, 0, 0, 8, 5, 0, 0, 10, 4],
    [7, 8, 4, 4, 0, 0, 0, 0, 0, 10, 10, 5, 0, 0, 0, 10, 0, 5, 3, 0, 1, 0, 0, 0, 3, 6, 10, 9, 8, 5, 0, 8, 0, 8, 3, 9, 6, 0, 5, 3, 0, 0, 6, 0, 0, 9, 6, 3, 0, 2],
    [0, 6, 0, 10, 0, 0, 6, 1, 0, 0, 0, 3, 9, 0, 10, 5, 8, 0, 9, 1, 8, 0, 2, 5, 0, 0, 0, 0, 0, 0, 8, 10, 8, 0, 0, 0, 7, 10, 2, 10, 4, 9, 3, 10, 8, 0, 10, 1, 10, 7],
    [0, 0, 0, 0, 3, 4, 0, 10, 7, 3, 9, 6, 8, 1, 0, 10, 6, 6, 5, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 8, 0, 5, 10, 3, 0],
    [2, 0, 10, 0, 3, 0, 1, 0, 3, 4, 7, 0, 0, 0, 0, 0, 0, 3, 0, 0, 5, 7, 5, 8, 0, 3, 8, 8, 5, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 5, 2, 0, 0, 0, 0, 4, 5, 0, 0, 9],
    [1, 0, 0, 5, 3, 0, 2, 0, 0, 7, 10, 5, 0, 0, 0, 8, 0, 0, 0, 9, 2, 7, 1, 0, 0, 0, 0, 5, 1, 2, 2, 4, 6, 7, 0, 0, 0, 2, 0, 0, 0, 0, 7, 4, 9, 5, 0, 0, 0, 3],
    [7, 0, 7, 0, 0, 10, 4, 0, 0, 0, 0, 0, 1, 9, 4, 4, 0, 9, 0, 0, 4, 10, 0, 1, 0, 7, 2, 5, 0, 0, 0, 0, 0, 10, 0, 0, 2, 0, 0, 10, 8, 1, 6, 2, 7, 0, 9, 2, 0, 0],
    [0, 7, 2, 0, 1, 8, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 2, 5, 8, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 8, 1, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 6, 1, 0, 2, 10, 0, 0, 2],
    [1, 2, 2, 3, 0, 0, 4, 7, 0, 7, 8, 4, 5, 10, 0, 2, 0, 9, 9, 4, 1, 0, 0, 9, 7, 4, 3, 0, 10, 3, 0, 6, 3, 10, 3, 5, 0, 10, 0, 0, 3, 3, 10, 10, 0, 6, 0, 0, 0, 0],
    [4, 4, 0, 1, 5, 0, 4, 0, 0, 0, 0, 0, 5, 8, 0, 3, 0, 0, 9, 9, 0, 10, 0, 4, 5, 0, 0, 9, 0, 10, 5, 0, 0, 4, 0, 2, 0, 8, 0, 3, 0, 0, 3, 7, 0, 0, 4, 6, 8, 8],
    [6, 1, 10, 0, 6, 0, 0, 0, 0, 0, 0, 4, 0, 7, 0, 2, 0, 0, 0, 7, 0, 4, 4, 0, 0, 2, 0, 0, 0, 0, 4, 0, 0, 9, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 4, 7, 8, 6],
    [0, 0, 0, 0, 0, 0, 2, 0, 0, 4, 0, 8, 3, 5, 0, 0, 4, 6, 8, 0, 1, 1, 8, 6, 1, 6, 7, 7, 0, 0, 0, 0, 6, 3, 0, 0, 7, 6, 6, 10, 3, 0, 0, 5, 7, 0, 0, 2, 0, 0],
    [0, 8, 0, 0, 0, 3, 5, 0, 1, 1, 0, 2, 0, 0, 0, 3, 0, 5, 0, 6, 10, 0, 0, 2, 9, 0, 1, 0, 0, 8, 0, 0, 0, 10, 0, 0, 4, 2, 1, 10, 7, 0, 5, 0, 10, 9, 0, 0, 0, 0],
    [0, 0, 2, 0, 3, 1, 3, 4, 5, 4, 10, 0, 10, 0, 0, 7, 0, 10, 1, 7, 8, 8, 6, 10, 8, 0, 0, 0, 0, 0, 6, 8, 0, 8, 8, 0, 9, 7, 0, 0, 0, 0, 7, 10, 0, 7, 0, 0, 8, 0],
    [7, 0, 0, 8, 0, 0, 0, 5, 0, 0, 2, 0, 3, 3, 2, 0, 0, 0, 0, 9, 0, 0, 1, 8, 6, 2, 0, 0, 0, 3, 9, 5, 9, 0, 0, 4, 5, 0, 2, 6, 0, 0, 0, 9, 7, 0, 9, 6, 0, 0],
    [0, 0, 0, 3, 5, 10, 3, 0, 1, 0, 8, 3, 1, 6, 3, 0, 6, 4, 8, 0, 10, 4, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 6, 10, 5, 5, 0, 9, 10, 0, 4, 4, 0, 0, 0, 9, 0, 0, 6, 10],
    [7, 7, 0, 1, 4, 0, 8, 0, 1, 10, 5, 4, 4, 3, 0, 0, 4, 0, 0, 0, 4, 0, 10, 9, 2, 4, 9, 0, 0, 9, 0, 0, 3, 1, 10, 0, 0, 2, 0, 0, 6, 7, 2, 0, 0, 6, 0, 0, 4, 0],
    [0, 0, 0, 0, 6, 0, 5, 2, 0, 0, 3, 0, 0, 0, 1, 10, 0, 9, 0, 5, 5, 1, 0, 2, 9, 0, 8, 0, 3, 0, 0, 10, 0, 10, 3, 0, 0, 0, 0, 0, 8, 8, 0, 0, 8, 0, 6, 4, 0, 0],
    [0, 7, 1, 2, 0, 0, 0, 0, 1, 8, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 0, 0, 10, 8, 1, 4, 2, 7, 0, 9, 3, 0, 2, 0, 8, 6, 0, 0, 0, 0, 10, 0, 0, 0]
])

G = nx.DiGraph(adjacency_matrix)

G.remove_edges_from(nx.selfloop_edges(G))
G.remove_edges_from((u, v) for u, v, d in G.edges(data=True) if d['weight'] == 0)

source = int(input("Enter the starting node (0-49): "))
target = int(input("Enter the ending node (0-49): "))

try:
    shortest_path = nx.dijkstra_path(G, source=source, target=target)
    shortest_path_cost = nx.dijkstra_path_length(G, source=source, target=target)

    print("The shortest path from: {} to: {} is: {}".format(source, target, shortest_path))
    print("The cost of the shortest path is: {}".format(shortest_path_cost))
    
    pos = nx.spring_layout(G)
    nx.draw_networkx_nodes(G, pos, node_size=300)
    nx.draw_networkx_labels(G, pos)
    all_edges = list(G.edges())
    nx.draw_networkx_edges(G, pos, edgelist=all_edges, edge_color='gray', alpha=0.5)
    path_edges = list(zip(shortest_path, shortest_path[1:]))
    nx.draw_networkx_edges(G, pos, edgelist=path_edges, edge_color='red', width=2)
    plt.axis('off')
    plt.show()
except nx.NetworkXNoPath: # there's probably a better way to do this but this script is more of a sanity check than anything
    print("No path found between: {} and: {}.".format(source, target))